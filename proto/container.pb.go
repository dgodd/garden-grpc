// Code generated by protoc-gen-go.
// source: container.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	container.proto

It has these top-level messages:
	RunRequest
	Stdout
	ExitRequest
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type RunRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *RunRequest) Reset()         { *m = RunRequest{} }
func (m *RunRequest) String() string { return proto1.CompactTextString(m) }
func (*RunRequest) ProtoMessage()    {}

type Stdout struct {
	Line string `protobuf:"bytes,1,opt,name=line" json:"line,omitempty"`
}

func (m *Stdout) Reset()         { *m = Stdout{} }
func (m *Stdout) String() string { return proto1.CompactTextString(m) }
func (*Stdout) ProtoMessage()    {}

type ExitRequest struct {
	Code int32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
}

func (m *ExitRequest) Reset()         { *m = ExitRequest{} }
func (m *ExitRequest) String() string { return proto1.CompactTextString(m) }
func (*ExitRequest) ProtoMessage()    {}

func init() {
}

// Client API for Container service

type ContainerClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (Container_RunClient, error)
	Exit(ctx context.Context, in *ExitRequest, opts ...grpc.CallOption) (*ExitRequest, error)
}

type containerClient struct {
	cc *grpc.ClientConn
}

func NewContainerClient(cc *grpc.ClientConn) ContainerClient {
	return &containerClient{cc}
}

func (c *containerClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (Container_RunClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Container_serviceDesc.Streams[0], c.cc, "/proto.Container/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &containerRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Container_RunClient interface {
	Recv() (*Stdout, error)
	grpc.ClientStream
}

type containerRunClient struct {
	grpc.ClientStream
}

func (x *containerRunClient) Recv() (*Stdout, error) {
	m := new(Stdout)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *containerClient) Exit(ctx context.Context, in *ExitRequest, opts ...grpc.CallOption) (*ExitRequest, error) {
	out := new(ExitRequest)
	err := grpc.Invoke(ctx, "/proto.Container/Exit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Container service

type ContainerServer interface {
	Run(*RunRequest, Container_RunServer) error
	Exit(context.Context, *ExitRequest) (*ExitRequest, error)
}

func RegisterContainerServer(s *grpc.Server, srv ContainerServer) {
	s.RegisterService(&_Container_serviceDesc, srv)
}

func _Container_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerServer).Run(m, &containerRunServer{stream})
}

type Container_RunServer interface {
	Send(*Stdout) error
	grpc.ServerStream
}

type containerRunServer struct {
	grpc.ServerStream
}

func (x *containerRunServer) Send(m *Stdout) error {
	return x.ServerStream.SendMsg(m)
}

func _Container_Exit_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(ExitRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ContainerServer).Exit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Container_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Container",
	HandlerType: (*ContainerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exit",
			Handler:    _Container_Exit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _Container_Run_Handler,
			ServerStreams: true,
		},
	},
}
